// Code generated by protoc-gen-go.
// source: dnss.proto
// DO NOT EDIT!

/*
Package dnss is a generated protocol buffer package.

It is generated from these files:
	dnss.proto

It has these top-level messages:
	GobMsg
*/
package dnss

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type GobMsg struct {
	// gob-encoded message.
	// A horrible hack, but will do for now.
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *GobMsg) Reset()         { *m = GobMsg{} }
func (m *GobMsg) String() string { return proto.CompactTextString(m) }
func (*GobMsg) ProtoMessage()    {}

func init() {
}

// Client API for DNSService service

type DNSServiceClient interface {
	Query(ctx context.Context, opts ...grpc.CallOption) (DNSService_QueryClient, error)
}

type dNSServiceClient struct {
	cc *grpc.ClientConn
}

func NewDNSServiceClient(cc *grpc.ClientConn) DNSServiceClient {
	return &dNSServiceClient{cc}
}

func (c *dNSServiceClient) Query(ctx context.Context, opts ...grpc.CallOption) (DNSService_QueryClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DNSService_serviceDesc.Streams[0], c.cc, "/dnss.DNSService/Query", opts...)
	if err != nil {
		return nil, err
	}
	x := &dNSServiceQueryClient{stream}
	return x, nil
}

type DNSService_QueryClient interface {
	Send(*GobMsg) error
	Recv() (*GobMsg, error)
	grpc.ClientStream
}

type dNSServiceQueryClient struct {
	grpc.ClientStream
}

func (x *dNSServiceQueryClient) Send(m *GobMsg) error {
	return x.ClientStream.SendProto(m)
}

func (x *dNSServiceQueryClient) Recv() (*GobMsg, error) {
	m := new(GobMsg)
	if err := x.ClientStream.RecvProto(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for DNSService service

type DNSServiceServer interface {
	Query(DNSService_QueryServer) error
}

func RegisterDNSServiceServer(s *grpc.Server, srv DNSServiceServer) {
	s.RegisterService(&_DNSService_serviceDesc, srv)
}

func _DNSService_Query_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DNSServiceServer).Query(&dNSServiceQueryServer{stream})
}

type DNSService_QueryServer interface {
	Send(*GobMsg) error
	Recv() (*GobMsg, error)
	grpc.ServerStream
}

type dNSServiceQueryServer struct {
	grpc.ServerStream
}

func (x *dNSServiceQueryServer) Send(m *GobMsg) error {
	return x.ServerStream.SendProto(m)
}

func (x *dNSServiceQueryServer) Recv() (*GobMsg, error) {
	m := new(GobMsg)
	if err := x.ServerStream.RecvProto(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _DNSService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dnss.DNSService",
	HandlerType: (*DNSServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Query",
			Handler:       _DNSService_Query_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}
